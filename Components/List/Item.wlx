SymbolObject         = $Options["SymbolObject"];
UId          = SymbolObject["Hash"];

removeButton = CreateUUID[];

Controls    = $Options["Controls"];

Category    = $Options["Category"];

Client      = $Options["Client"];
Controller  = CreateUUID[];
ControllerListener  = CreateUUID[];

clonedEvent = EventClone[SymbolObject];

detector = EventClone[Client];
EventHandler[detector, {"Closed" -> Function[Null, destoryWidget]}];

Echo[SymbolObject["Name"]];

destoryWidget := With[{},
   Echo["Item >> Item.wlx >> destroyed!"];
   EventRemove[detector];
   EventRemove[clonedEvent];
   EventRemove[Controller];
];

previousState = SymbolObject["Category"];

EventHandler[clonedEvent, {
   "Update" -> Function[Null,
      With[{client = Client},
        If[previousState =!= SymbolObject["Category"],
            EventFire[Controller, "Update", <|"State" -> SymbolObject["Category"], "Client" -> client|>];
            previousState = SymbolObject["Category"]
        ];
      ]
   ],

   "Destroy" -> Function[data,
        EventFire[Controller, "Remove", <|"Client" -> Client|>];
    ]
}];

EventHandler[ControllerListener, {
    "SelectCategory" -> Function[selected,
        Echo["Update select!"];
        Echo[state];
        With[{n = SymbolObject},
            n["Category"] = selected
        ];        

        EventFire[SymbolObject, "Update", Null];
    ],


    "CurrentCategory" -> Function[state,
        Echo["Update!"];
        Echo[state];
        With[{n = SymbolObject},
            If[state,
                n["Category"] = Category;
            ,
                n["Category"] = "Unsorted";
            ];
        ];

        EventFire[SymbolObject, "Update", Null];
    ]
}];

incategory = If[SymbolObject["Category"] === Category, "activated"];

SymbolName      = SymbolObject["Name"];
SymbolCategoryList = Table[
    If[Cat === SymbolObject["Category"],
        <option selected="true"><Cat/></option>
    ,
        <option><Cat/></option>
    ]
    
, {Cat, $Options["Categories"]}];



<div>
    <div class="flex gap-y-2 flex-col px-2 py-4 bg-gray-20 rounded-lg cursor-pointer text-gray-500 hover:bg-gray-100 {incategory}">
        <div class="flex flex-row" id="{UId}">
            <span class="flex items-center justify-center w-5 h-5 text-transparent border-2 border-gray-300 rounded-full">
                <svg class="w-4 h-4 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                 <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
            </span>
            <span class="ml-4 text-sm"><SymbolName/></span>
        </div>
        <div class="flex flex-row gap-x-3">
            <div class="flex flex-col">
                <label for="{UId}-category" class="block text-sm font-medium leading-6 text-gray-900">Category</label>
                <select id="{UId}-category" class="mt-2 block w-full rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6">
                    <SymbolCategoryList/>
                </select>
            </div>
          <a target="blank" href="/markdown/{SymbolName}" class="ring-teal-500 ring-2 hover:bg-teal-500 h-6 text-sm text-black  px-2 py-0.5 rounded-sm">
            Docs
          </a>
        </div>
    </div>
    
    
    
    <WebUIJSBind Event={Controller}>
        const el = document.getElementById('<UId/>');
        const cat = document.getElementById('<UId/>-category');

        cat.addEventListener('change', (ev) => {
            
            console.log(ev);
            ev.preventDefault();
            console.log(cat.value);
            server.emitt('<ControllerListener/>', '"'+cat.value+'"', 'SelectCategory');
        }, false);

        el.addEventListener('click', (event) => {
            if (el.parentNode.classList.contains('activated')) {
                //el.classList.remove('activated');
                server.emitt('<ControllerListener/>', 'False', 'CurrentCategory');
            } else {
                //el.classList.add('activated');
                server.emitt('<ControllerListener/>', 'True', 'CurrentCategory');                
            }            
        });

        this.on('Update', async (data) => {
            const assoc = await interpretate(data, {hold:true});
            const state = await interpretate(assoc.State, {});
            console.log('Update!');
            console.log(state);
            
            if (state === '<Category/>') {
                el.parentNode.classList.add('activated');
            } else {
                el.parentNode.classList.remove('activated');
            }   
            
            //
            console.log('UPDATE');
            cat.value = state;

            
        })

        this.on('Remove', () => {
            console.warn('Destroy!');
            el.parentNode.parentNode.remove();
        })
    </WebUIJSBind>     
</div>